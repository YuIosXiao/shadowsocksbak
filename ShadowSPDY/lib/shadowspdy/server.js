// Generated by CoffeeScript 1.7.1

/*
  Copyright (c) 2014 clowwindy
 
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
 
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
 
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 */

(function() {
  var encrypt, fs, http, inet, net, path, spdy, url, utils;

  fs = require('fs');

  spdy = require('spdy');

  http = require('http');

  net = require('net');

  url = require('url');

  path = require("path");

  encrypt = require('./encrypt');

  utils = require("./utils");

  inet = require("./inet");

  exports.main = function() {
    var config, connections, inetNtoa, key, portPassword, timeout, _port, _results;
    console.log(utils.version);
    inetNtoa = function(buf) {
      return buf[0] + "." + buf[1] + "." + buf[2] + "." + buf[3];
    };
    config = utils.parseArgs(true);
    timeout = Math.floor(config.timeout * 1000) || 300000;
    portPassword = config.port_password;
    if (!(config.server && (config.server_port || portPassword) && config.password)) {
      utils.warn('config.json not found, you have to specify all config in commandline');
      process.exit(1);
    }
    connections = 0;
    if (portPassword) {
      if (config.server_port || config.password) {
        utils.warn('warning: port_password should not be used with server_port and password. server_port and password will be ignored');
      }
    } else {
      portPassword = {};
      portPassword[config.server_port.toString()] = config.password;
    }
    _results = [];
    for (_port in portPassword) {
      key = portPassword[_port];
      _results.push((function() {
        var port, server, server_ip, servers, _i, _len;
        port = _port;
        utils.info("calculating ciphers for port " + port);
        server = net.createServer(function(socket) {
          var conn;
          socket = new encrypt.ShadowStream(socket, config.method, key);
          conn = new spdy.Connection(socket, {
            isServer: true,
            client: false
          }, server);
          conn._setVersion(3.1);
          conn.on('error', function(err) {
            return utils.error(err);
          });
          return conn.on('stream', function(stream) {
            var addrLen, cachedPieces, clean, headerLength, remote, remoteAddr, remotePort, stage;
            connections += 1;
            stage = 0;
            headerLength = 0;
            remote = null;
            cachedPieces = [];
            addrLen = 0;
            remoteAddr = null;
            remotePort = null;
            utils.debug("connections: " + connections);
            clean = function() {
              utils.debug("clean");
              connections -= 1;
              remote = null;
              stream = null;
              return utils.debug("connections: " + connections);
            };
            stream.on("data", function(data) {
              var addrtype, buf, e;
              utils.log(utils.EVERYTHING, "connection on data");
              if (stage === 5) {
                return;
              }
              if (stage === 0) {
                try {
                  addrtype = data[0];
                  if (addrtype === void 0) {
                    return;
                  }
                  if (addrtype === 3) {
                    addrLen = data[1];
                  } else if (addrtype !== 1 && addrtype !== 4) {
                    utils.error("unsupported addrtype: " + addrtype + " maybe wrong password");
                    stream.destroy();
                    return;
                  }
                  if (addrtype === 1) {
                    remoteAddr = inetNtoa(data.slice(1, 5));
                    remotePort = data.readUInt16BE(5);
                    headerLength = 7;
                  } else if (addrtype === 4) {
                    remoteAddr = inet.inet_ntop(data.slice(1, 17));
                    remotePort = data.readUInt16BE(17);
                    headerLength = 19;
                  } else {
                    remoteAddr = data.slice(2, 2 + addrLen).toString("binary");
                    remotePort = data.readUInt16BE(2 + addrLen);
                    headerLength = 2 + addrLen + 2;
                  }
                  remote = net.connect(remotePort, remoteAddr, function() {
                    var i, piece;
                    utils.info("connecting " + remoteAddr + ":" + remotePort);
                    if ((remote == null) || (stream == null)) {
                      return;
                    }
                    i = 0;
                    while (i < cachedPieces.length) {
                      piece = cachedPieces[i];
                      remote.write(piece);
                      i++;
                    }
                    cachedPieces = null;
                    remote.pipe(stream);
                    stream.pipe(remote);
                    stage = 5;
                    return utils.debug("stage = 5");
                  });
                  remote.on("error", function(e) {
                    utils.debug("remote on error");
                    return utils.error("remote " + remoteAddr + ":" + remotePort + " error: " + e);
                  });
                  remote.on("close", function(had_error) {
                    utils.debug("remote on close:" + had_error);
                    if (had_error) {
                      if (stream) {
                        return stream.destroy();
                      }
                    } else {
                      if (stream) {
                        return stream.end();
                      }
                    }
                  });
                  remote.setTimeout(timeout, function() {
                    utils.debug("remote on timeout");
                    if (remote) {
                      remote.destroy();
                    }
                    if (stream) {
                      return stream.destroy();
                    }
                  });
                  if (data.length > headerLength) {
                    buf = new Buffer(data.length - headerLength);
                    data.copy(buf, 0, headerLength);
                    cachedPieces.push(buf);
                    buf = null;
                  }
                  stage = 4;
                  return utils.debug("stage = 4");
                } catch (_error) {
                  e = _error;
                  utils.error(e);
                  stream.destroy();
                  if (remote) {
                    return remote.destroy();
                  }
                }
              } else {
                if (stage === 4) {
                  return cachedPieces.push(data);
                }
              }
            });
            stream.on("error", function(e) {
              utils.debug("connection on error");
              return utils.error("local error: " + e);
            });
            stream.on("close", function(had_error) {
              utils.debug("connection on close:" + had_error);
              if (had_error) {
                if (remote) {
                  remote.destroy();
                }
              } else {
                if (remote) {
                  remote.end();
                }
              }
              return clean();
            });
            return stream.setTimeout(timeout, function() {
              utils.debug("connection on timeout");
              if (remote) {
                remote.destroy();
              }
              if (stream) {
                return stream.destroy();
              }
            });
          });
        });
        servers = config.server;
        if (!(servers instanceof Array)) {
          servers = [servers];
        }
        for (_i = 0, _len = servers.length; _i < _len; _i++) {
          server_ip = servers[_i];
          server.listen(port, server_ip, function() {
            return utils.info("server listening at " + server_ip + ":" + port + " ");
          });
        }
        return server.on("error", function(e) {
          if (e.code === "EADDRINUSE") {
            utils.error("Address in use, aborting");
          } else {
            utils.error(e);
          }
          return process.stdout.on('drain', function() {
            return process.exit(1);
          });
        });
      })());
    }
    return _results;
  };

  if (require.main === module) {
    exports.main();
  }

}).call(this);
