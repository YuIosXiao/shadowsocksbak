// Generated by CoffeeScript 1.7.1

/*
  Copyright (c) 2014 clowwindy
 
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
 
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
 
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 */

(function() {
  var connectionIdCount, createServer, currentConnections, encrypt, fs, inet, inetAton, inetNtoa, net, spdy, strategy, streamIdCount, utils;

  fs = require('fs');

  net = require('net');

  spdy = require('spdy');

  encrypt = require('./encrypt');

  utils = require('./utils');

  inet = require('./inet');

  strategy = require('./strategy');

  inetNtoa = function(buf) {
    return buf[0] + "." + buf[1] + "." + buf[2] + "." + buf[3];
  };

  inetAton = function(ipStr) {
    var buf, i, parts;
    parts = ipStr.split(".");
    if (parts.length !== 4) {
      return null;
    } else {
      buf = new Buffer(4);
      i = 0;
      while (i < 4) {
        buf[i] = +parts[i];
        i++;
      }
      return buf;
    }
  };

  currentConnections = 0;

  connectionIdCount = 1;

  streamIdCount = 1;

  createServer = function(serverAddr, serverPort, port, key, method, timeout, local_address, connections) {
    var createStream, getConnection, server, _connections;
    if (local_address == null) {
      local_address = '127.0.0.1';
    }
    if (connections == null) {
      connections = 1;
    }
    _connections = {};
    new strategy.WindowSizeStrategy(_connections, {});
    getConnection = function(callback) {
      var connection, index, keys, _socket;
      if (Object.keys(_connections).length + 1 > connections) {
        utils.debug('return an existing connection');
        keys = Object.keys(_connections);
        index = Math.floor(Math.random() * keys.length);
        connection = _connections[keys[index]];
        if (connection.writable) {
          process.nextTick(function() {
            return callback(_connections[keys[index]]);
          });
          return _connections[keys[index]];
        } else {
          delete _connections[connection.connectionId];
        }
      }
      utils.debug('return a new connection');
      connection = null;
      _socket = net.connect({
        port: serverPort,
        host: serverAddr
      }, function() {
        connection = new spdy.Connection(_socket, {
          isServer: false
        });
        connection._setVersion(3.1);
        connection._connectionId = connectionIdCount;
        connectionIdCount += 1;
        _connections[connection._connectionId] = connection;
        callback(connection);
        _socket.on('end', function(err) {
          utils.error('connection ended:');
          return delete _connections[connection._connectionId];
        });
        _socket.on('close', function(err) {
          return delete _connections[connection._connectionId];
        });
        return connection.on('error', function(err) {
          return utils.error(err);
        });
      });
      _socket = new encrypt.ShadowStream(_socket, method, key);
      _socket.on('error', function(err) {
        utils.error('connection error:');
        utils.error(err);
        _socket.destroy();
        if (connection) {
          return delete _connections[connection._connectionId];
        } else {
          return process.nextTick(function() {
            return callback(null);
          });
        }
      });
      return null;
    };
    createStream = function(connection, callback) {
      var headers, state, stream;
      stream = new spdy.Stream(connection, {
        id: streamIdCount,
        priority: 7
      });
      streamIdCount += 2;
      headers = {};
      state = stream._spdyState;
      connection._lock(function() {
        return state.framer.streamFrame(state.id, 0, {
          priority: 7
        }, headers, function(err, frame) {
          if (err) {
            connection._unlock();
            return self.emit('error', err);
          }
          connection.write(frame);
          connection._unlock();
          connection._addStream(stream);
          stream.emit('_spdyRequest');
          return state.initialized = true;
        });
      });
      if (callback != null) {
        process.nextTick(function() {
          return callback(stream);
        });
      }
      return stream;
    };
    server = net.createServer(function(connection) {
      var addrLen, addrToSend, cachedPieces, clean, headerLength, remote, remoteAddr, remotePort, stage;
      currentConnections += 1;
      stage = 0;
      headerLength = 0;
      remote = null;
      cachedPieces = [];
      addrLen = 0;
      remoteAddr = null;
      remotePort = null;
      addrToSend = "";
      utils.debug("connections: " + currentConnections);
      clean = function() {
        utils.debug("clean");
        currentConnections -= 1;
        remote = null;
        connection = null;
        return utils.debug("connections: " + currentConnections);
      };
      connection.on("data", function(data) {
        var addrtype, buf, cmd, e, reply, tempBuf;
        utils.log(utils.EVERYTHING, "connection on data");
        if (stage === 5) {
          return;
        }
        if (stage === 0) {
          tempBuf = new Buffer(2);
          tempBuf.write("\u0005\u0000", 0);
          connection.write(tempBuf);
          stage = 1;
          utils.debug("stage = 1");
          return;
        }
        if (stage === 1) {
          try {
            cmd = data[1];
            addrtype = data[3];
            if (cmd === 1) {

            } else {
              utils.error("unsupported cmd: " + cmd);
              reply = new Buffer("\u0005\u0007\u0000\u0001", "binary");
              connection.end(reply);
              return;
            }
            if (addrtype === 3) {
              addrLen = data[4];
            } else if (addrtype !== 1 && addrtype !== 4) {
              utils.error("unsupported addrtype: " + addrtype);
              connection.destroy();
              return;
            }
            addrToSend = data.slice(3, 4).toString("binary");
            if (addrtype === 1) {
              remoteAddr = inetNtoa(data.slice(4, 8));
              addrToSend += data.slice(4, 10).toString("binary");
              remotePort = data.readUInt16BE(8);
              headerLength = 10;
            } else if (addrtype === 4) {
              remoteAddr = inet.inet_ntop(data.slice(4, 20));
              addrToSend += data.slice(4, 22).toString("binary");
              remotePort = data.readUInt16BE(20);
              headerLength = 22;
            } else {
              remoteAddr = data.slice(5, 5 + addrLen).toString("binary");
              addrToSend += data.slice(4, 5 + addrLen + 2).toString("binary");
              remotePort = data.readUInt16BE(5 + addrLen);
              headerLength = 5 + addrLen + 2;
            }
            buf = new Buffer(10);
            buf.write("\u0005\u0000\u0000\u0001", 0, 4, "binary");
            buf.write("\u0000\u0000\u0000\u0000", 4, 4, "binary");
            buf.writeInt16BE(2222, 8);
            connection.write(buf);
            utils.info("connecting " + remoteAddr + ":" + remotePort);
            getConnection(function(aConnection) {
              if (aConnection == null) {
                if (connection) {
                  connection.destroy();
                }
                return;
              }
              remote = createStream(aConnection, function() {
                var addrToSendBuf, i, piece;
                if ((remote == null) || (connection == null)) {
                  return;
                }
                addrToSendBuf = new Buffer(addrToSend, "binary");
                remote.write(addrToSendBuf);
                i = 0;
                while (i < cachedPieces.length) {
                  piece = cachedPieces[i];
                  remote.write(piece);
                  i++;
                }
                cachedPieces = null;
                remote.pipe(connection);
                connection.pipe(remote);
                stage = 5;
                return utils.debug("stage = 5");
              });
              remote.on("error", function(e) {
                utils.debug("remote on error");
                return utils.error("remote " + remoteAddr + ":" + remotePort + " error: " + e);
              });
              remote.on("close", function(had_error) {
                utils.debug("remote on close:" + had_error);
                if (had_error) {
                  if (connection) {
                    return connection.destroy();
                  }
                } else {
                  if (connection) {
                    return connection.end();
                  }
                }
              });
              return remote.setTimeout(timeout, function() {
                utils.debug("remote on timeout");
                if (remote) {
                  remote.destroy();
                }
                if (connection) {
                  return connection.destroy();
                }
              });
            });
            if (data.length > headerLength) {
              buf = new Buffer(data.length - headerLength);
              data.copy(buf, 0, headerLength);
              cachedPieces.push(buf);
              buf = null;
            }
            stage = 4;
            return utils.debug("stage = 4");
          } catch (_error) {
            e = _error;
            throw e;
            utils.error(e);
            if (connection) {
              connection.destroy();
            }
            if (remote) {
              return remote.destroy();
            }
          }
        } else {
          if (stage === 4) {
            return cachedPieces.push(data);
          }
        }
      });
      connection.on("error", function(e) {
        utils.debug("connection on error");
        return utils.error("local error: " + e);
      });
      connection.on("close", function(had_error) {
        utils.debug("connection on close:" + had_error);
        if (had_error) {
          if (remote) {
            remote.destroy();
          }
        } else {
          if (remote) {
            remote.end();
          }
        }
        return clean();
      });
      return connection.setTimeout(timeout, function() {
        utils.debug("connection on timeout");
        if (remote) {
          remote.destroy();
        }
        if (connection) {
          return connection.destroy();
        }
      });
    });
    if (local_address != null) {
      server.listen(port, local_address, function() {
        return utils.info("local listening at " + (server.address().address) + ":" + port);
      });
    } else {
      server.listen(port, function() {
        return utils.info("local listening at 0.0.0.0:" + port);
      });
    }
    server.on("error", function(e) {
      if (e.code === "EADDRINUSE") {
        return utils.error("Address in use, aborting");
      } else {
        return utils.error(e);
      }
    });
    server.on("close", function() {
      return udpServer.close();
    });
    return server;
  };

  exports.createServer = createServer;

  exports.main = function() {
    var config, s, timeout;
    console.log(utils.version);
    config = utils.parseArgs(false);
    timeout = Math.floor(config.timeout * 1000) || 300000;
    s = createServer(config.server, config.server_port, config.local_port, config.password, config.method, timeout, config.local_address, config.connections);
    return s.on("error", function(e) {
      return process.stdout.on('drain', function() {
        return process.exit(1);
      });
    });
  };

  if (require.main === module) {
    exports.main();
  }

}).call(this);
