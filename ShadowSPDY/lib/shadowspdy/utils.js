// Generated by CoffeeScript 1.7.1

/*
  Copyright (c) 2014 clowwindy
 
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
 
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
 
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 */

(function() {
  var argparse, fs, parseCommandLineArgs, path, util, utils, _logging_level;

  fs = require('fs');

  util = require('util');

  argparse = require('argparse');

  path = require('path');

  utils = exports;

  exports.checkConfig = function(config) {
    var _ref;
    if ((_ref = config.server) === '127.0.0.1' || _ref === 'localhost') {
      exports.warn("Server is set to " + config.server + ", maybe it's not correct");
      exports.warn("Notice server will listen at " + config.server + ":" + config.server_port);
    }
    if ((config.method || '').toLowerCase() === 'rc4') {
      exports.warn('RC4 is not safe; please use a safer cipher, like AES-256-CFB');
    }
    if (parseInt(process.versions.node.split('.')[1]) < 10) {
      exports.error('Your node version is ' + process.versions.node + ' , please install node.js v0.10 from http://nodejs.org/');
      return process.exit();
    }
  };

  exports.rawVersion = "0.1.8";

  exports.version = "shadowspdy v" + exports.rawVersion;

  exports.EVERYTHING = 0;

  exports.DEBUG = 1;

  exports.INFO = 2;

  exports.WARN = 3;

  exports.ERROR = 4;

  _logging_level = exports.INFO;

  exports.config = function(level) {
    return _logging_level = level;
  };

  exports.log = function(level, msg) {
    if (level >= _logging_level) {
      return util.log(msg);
    }
  };

  exports.debug = function(msg) {
    return exports.log(exports.DEBUG, msg);
  };

  exports.info = function(msg) {
    return exports.log(exports.INFO, msg);
  };

  exports.warn = function(msg) {
    return exports.log(exports.WARN, msg);
  };

  exports.error = function(msg) {
    return exports.log(exports.ERROR, msg);
  };

  parseCommandLineArgs = function(isServer) {
    var parser;
    parser = new argparse.ArgumentParser({
      addHelp: true
    });
    parser.addArgument(['-c'], {
      dest: 'config_file',
      help: 'path to config file, default is ./config.json'
    });
    parser.addArgument(['-s'], {
      dest: 'server',
      help: 'server address'
    });
    parser.addArgument(['-p'], {
      dest: 'server_port',
      help: 'server port'
    });
    parser.addArgument(['-k'], {
      dest: 'password',
      help: 'password'
    });
    parser.addArgument(['-m'], {
      dest: 'method',
      help: 'encryption method, for example, aes-256-cfb'
    });
    if (!isServer) {
      parser.addArgument(['-b'], {
        dest: 'local_address',
        help: 'local binding address, default is 127.0.0.1'
      });
      parser.addArgument(['-l'], {
        dest: 'local_port',
        help: 'local port'
      });
      parser.addArgument(['-n'], {
        dest: 'connections',
        help: 'max SPDY connections, default is 1'
      });
    }
    parser.addArgument(['-v'], {
      dest: 'verbose',
      help: 'vebose mode',
      action: 'storeTrue'
    });
    return parser.parseArgs();
  };

  exports.parseArgs = function(isServer) {
    var config, configContent, configFromArgs, configPath, e, k, v;
    configFromArgs = parseCommandLineArgs(isServer);
    configPath = 'config.json';
    if (configFromArgs.config_file) {
      configPath = configFromArgs.config_file;
    }
    if (!fs.existsSync(configPath)) {
      configPath = path.resolve(__dirname, "config.json");
      if (!fs.existsSync(configPath)) {
        configPath = path.resolve(__dirname, "../../config.json");
        if (!fs.existsSync(configPath)) {
          configPath = null;
        }
      }
    }
    if (configPath) {
      utils.info('loading config from ' + configPath);
      configContent = fs.readFileSync(configPath);
      try {
        config = JSON.parse(configContent);
      } catch (_error) {
        e = _error;
        utils.error('found an error in config.json: ' + e.message);
        process.exit(1);
      }
    } else {
      config = {};
    }
    for (k in configFromArgs) {
      v = configFromArgs[k];
      if ((v != null) && !(v instanceof Function)) {
        config[k] = v;
      }
    }
    if (config.verbose) {
      utils.config(utils.DEBUG);
    }
    utils.checkConfig(config);
    if (!((config.server != null) && (config.server_port != null) && (isServer || (config.local_port != null)) && (config.password != null))) {
      utils.warn('config.json not found, you have to specify all config in commandline');
      process.exit(1);
    }
    return config;
  };

}).call(this);
